#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities
#define INF INT_MAX

// Function to find the minimum path distance using Dynamic Programming
int tsp(int dist[N][N], int dp[1 << N][N], int mask, int pos) {
    // If all cities have been visited, return the distance to the starting city
    if (mask == (1 << N) - 1) {
        return dist[pos][0];
    }

    // If already calculated, return the result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INF;
    for (int city = 0; city < N; city++) {
        // If city has not been visited yet
        if ((mask & (1 << city)) == 0) {
            int newAns = dist[pos][city] + tsp(dist, dp, mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;
        }
    }

    // Store the result and return it
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    // Test Case 1
    int dist1[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    // Test Case 2
    int dist2[N][N] = {
        {0, 10, 10, 10},
        {10, 0, 10, 10},
        {10, 10, 0, 10},
        {10, 10, 10, 0}
    };

    // Test Case 3
    int dist3[N][N] = {
        {0, 1, 2, 3},
        {1, 0, 4, 5},
        {2, 4, 0, 6},
        {3, 5, 6, 0}
    };

    int dp[1 << N][N];
    
    // Initialize dp array with -1
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    // Call TSP function for each test case and print the result
    printf("Test Case 1 Output: %d\n", tsp(dist1, dp, 1, 0));
    
    // Reset dp for the second test case
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    printf("Test Case 2 Output: %d\n", tsp(dist2, dp, 1, 0));

    // Reset dp for the third test case
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    printf("Test Case 3 Output: %d\n", tsp(dist3, dp, 1, 0));

    return 0;
}#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities
#define INF INT_MAX

// Function to find the minimum path distance using Dynamic Programming
int tsp(int dist[N][N], int dp[1 << N][N], int mask, int pos) {
    // If all cities have been visited, return the distance to the starting city
    if (mask == (1 << N) - 1) {
        return dist[pos][0];
    }

    // If already calculated, return the result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INF;
    for (int city = 0; city < N; city++) {
        // If city has not been visited yet
        if ((mask & (1 << city)) == 0) {
            int newAns = dist[pos][city] + tsp(dist, dp, mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;
        }
    }

    // Store the result and return it
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    // Test Case 1
    int dist1[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    // Test Case 2
    int dist2[N][N] = {
        {0, 10, 10, 10},
        {10, 0, 10, 10},
        {10, 10, 0, 10},
        {10, 10, 10, 0}
    };

    // Test Case 3
    int dist3[N][N] = {
        {0, 1, 2, 3},
        {1, 0, 4, 5},
        {2, 4, 0, 6},
        {3, 5, 6, 0}
    };

    int dp[1 << N][N];
    
    // Initialize dp array with -1
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    // Call TSP function for each test case and print the result
    printf("Test Case 1 Output: %d\n", tsp(dist1, dp, 1, 0));
    
    // Reset dp for the second test case
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    printf("Test Case 2 Output: %d\n", tsp(dist2, dp, 1, 0));

    // Reset dp for the third test case
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    printf("Test Case 3 Output: %d\n", tsp(dist3, dp, 1, 0));

    return 0;
}
